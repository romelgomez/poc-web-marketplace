# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Listing {
  id: ID!
  name: String
  visibility: ListingVisibility!
  accountId: ID
  description: String
  tag: ID
  created: DateTime
  modified: DateTime
  deleted: DateTime
}

enum ListingVisibility {
  PUBLIC
  PRIVATE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  firstName: String!
  lastName: String
  email: String!
  secondName: String
  secondLastName: String
  document: String
  documentType: String
  nationality: String
  birthday: DateTime
  tag: ID
}

type Account {
  id: ID!
  name: String
  ownerId: ID
  slug: String
  tag: ID
  created: DateTime
  user: User
  listings: [Listing!]
  modified: DateTime
  disabled: Boolean
}

type Media {
  id: ID!
  type: String!
  size: Float!
  version: Float!
  name: String!
  tag: String
  created: DateTime
  deleted: DateTime
}

type PublicationMedia {
  id: ID!
  publicationId: ID!
  mediaId: ID!
  media: Media!
  tag: ID
  created: DateTime
  modified: DateTime
  deleted: DateTime
}

type Publication {
  id: ID
  tag: String
  title: String!
  description: String
  listingId: ID
  visibility: AddressType!
  listing: Listing
  created: DateTime
  modified: DateTime
  deleted: DateTime
  media: [Media!]!
}

enum AddressType {
  PUBLIC
  PRIVATE
}

type MediaOutputDto {
  id: String!
  name: String!
  size: Float!
  type: String!
  version: Float!
  deleted: String
}

type Hit {
  id: String!
  tag: String!
  listingId: String!
  title: String!
  description: String!
  visiblility: AddressType!
  created: String!
  modified: String!
  deleted: String
  media: [MediaOutputDto!]
}

type FacetStat {
  min: Float!
  max: Float!
}

type Search {
  hits: [Hit!]!
  processingTimeMs: Float!
  query: String!
  facetStats: FacetStat
  vector: [Float!]
  totalHits: Float
  hitsPerPage: Float
  page: Float
  totalPages: Float
  offset: Float
  limit: Float
  estimatedTotalHits: Float
  count: Float
}

type Query {
  getAccount(email: String!): Account
  account(id: String!): Account!
  protectedPingAccount(id: String!): String!
  openPingAccount(id: String!): String!
  listings: [Listing!]!
  listing(id: String!): Listing!
  media(id: String!): Media
  search(input: SearchInput!, index: String!): Search!
  publication(id: String!): Publication
  publicationMedias: [PublicationMedia!]!
  publicationMedia(id: String!): PublicationMedia
}

input SearchInput {
  q: String
  offset: Int
  limit: Int
  attributesToHighlight: [String]
  highlightPreTag: String
  highlightPostTag: String
  attributesToCrop: [String]
  cropLength: Int
  cropMarker: String
  filter: [String]
  sort: [String]
  facets: [String]
  attributesToRetrieve: [String]
  showMatchesPosition: Boolean
  matchingStrategy: String
  hitsPerPage: Int
  page: Int
  facetName: String
  facetQuery: String
  vector: [Int]
  showRankingScore: Boolean
  showRankingScoreDetails: Boolean
  attributesToSearchOn: [String]
}

type Mutation {
  createAccount(data: UserInput!): Account!
  updateAccount(data: AccountInput!): Account!
  removeAccount(id: String!): Account!
  createListing(data: ListingInput!): Listing!
  updateListing(data: ListingInput!): Listing!
  removeListing(id: String!): Listing!
  updateMedia(data: MediaInput!): Media!
  removeMedia(id: String!): Media!
  createUser(createUserInput: UserInput!, accountId: String!, role2: RoleType!): User!
  updateUser(userData: UserInput!): User!
  removeUser(id: String!): User!
  createPublication(data: PublicationInput!): Publication!
  updatePublication(data: PublicationInput!): Publication!
  removePublication(id: String!): Publication!
  deletePublicationMedia(mediaId: String!): Publication!
  createPublicationMedia(data: PublicationMediaInput!): PublicationMedia!
  updatePublicationMedia(data: PublicationMediaInput!): PublicationMedia!
  removePublicationMedia(id: String!): PublicationMedia!
}

input UserInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  secondName: String
  secondLastName: String
  document: String
  documentType: String
  nationality: String
  birthday: DateTime
  tag: String
}

input AccountInput {
  id: ID
  name: String
  ownerId: ID
  slug: String
  tag: ID
}

input ListingInput {
  id: ID!
  name: String!
  visibility: ListingVisibility!
  accountId: ID
  description: String
  tag: ID
}

input MediaInput {
  id: ID!
  type: String!
  size: Int!
  version: Int!
  name: String!
  tag: String
}

enum RoleType {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

input PublicationInput {
  id: ID!
  tag: String
  title: String!
  description: String!
  listingId: ID
  media: [MediaInput!]
  visibility: AddressType!
}

input PublicationMediaInput {
  id: ID!
  publicationId: ID!
  mediaId: ID!
  tag: String
}